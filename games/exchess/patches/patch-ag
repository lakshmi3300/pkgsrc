$NetBSD: patch-ag,v 1.2 2013/04/30 22:20:58 joerg Exp $

--- hash.cpp.orig	2000-04-01 07:46:34.000000000 +0000
+++ hash.cpp
@@ -67,7 +67,7 @@ void close_hash()
 
 /* function to stuff a hash entry into the hash table */
 void put_hash(h_code h_key, int score, int alpha, int beta,
-                            int depth, move hmove, int mate_ext)
+                            int depth, my_move hmove, int mate_ext)
 {
  hash_rec *h, *r; int flag; 
 
@@ -127,7 +127,7 @@ void put_hash(h_code h_key, int score, i
 }
 
 /* function to find and return a hash entry */
-int get_hash(h_code h_key, int alpha, int beta, int depth, int *mate_ext, int *null_hash, move *gmove)
+int get_hash(h_code h_key, int alpha, int beta, int depth, int *mate_ext, int *null_hash, my_move *gmove)
 {
  hash_rec *h; int hscore;
 
@@ -210,7 +210,7 @@ h_code gen_code(position *p)
   }
 
   for(i = 0; i < 64; i++) {
-   or(temp_rec, hval[ID(p->sq[i])][i]);
+   hash_or(temp_rec, hval[ID(p->sq[i])][i]);
    if(p->sq[i].side == p->wtm) p->material += value[p->sq[i].type];
    else p->material -= value[p->sq[i].type];
    if(p->sq[i].type > PAWN) p->pieces[p->sq[i].side]++;
@@ -220,11 +220,11 @@ h_code gen_code(position *p)
    } 
   }
 
-  if(p->wtm) { or(temp_rec, wtm); }
-  else { or(temp_rec, btm); }
+  if(p->wtm) { hash_or(temp_rec, wtm); }
+  else { hash_or(temp_rec, btm); }
 
-  or(temp_rec, castle_code[p->castle]);
-  or(temp_rec, ep_code[p->ep]);
+  hash_or(temp_rec, castle_code[p->castle]);
+  hash_or(temp_rec, ep_code[p->ep]);
 
   return temp_rec;
 }
